<#@ include file="T4Toolbox.tt" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@  assembly name="$(TargetDir)CodeGen.dll" #>
<#@  assembly name="$(TargetDir)Foundations.HttpClient.dll" #>
<#@  assembly name="System.Core" #>
<#@  assembly name="System.Runtime" #>
<#@ import namespace="CodeGen" #>
<#+
    public class ApiKeyExchangeResourceProviderTemplate : Template
    {
        private readonly BoxedApiKeyExchangeResourceProvider _source;
        private readonly string _namespace;

        public ApiKeyExchangeResourceProviderTemplate(
            string ns, 
            BoxedApiKeyExchangeResourceProvider source)
        {
            _namespace = ns;
            _source = source;
        }

	    public override string TransformText()
        {
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Material.Metadata;
using System;
using Material.Infrastructure.Credentials;
using Foundations.HttpClient.Enums;
using Material.Infrastructure;
using System.CodeDom.Compiler;

namespace <#= _namespace #>
{     
<#+
#>
    /// <summary>
    /// <#= _source.Comments #>
    /// </summary>
	[GeneratedCode("T4Toolbox", "14.0")]
	public partial class <#= _source.Name #> : ApiKeyExchangeResourceProvider 
    {
        public override string KeyName { get; } = "<#= _source.KeyName ?? " " #>";
        public override HttpParameterType KeyType { get; } = HttpParameterType.<#= _source.KeyType.ToString() #>;
        public override Uri TokenUrl { get; } = new Uri("<#= _source.TokenUrl.ToString() #>");
        public override string TokenName { get; } = "<#= _source.TokenName #>";
    }
}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }
#>