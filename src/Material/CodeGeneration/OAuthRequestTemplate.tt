<#@ include file="T4Toolbox.tt" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@  assembly name="$(TargetDir)CodeGen.dll" #>
<#@  assembly name="$(TargetDir)Foundations.HttpClient.dll" #>
<#@  assembly name="System.Core" #>
<#@  assembly name="System.Runtime" #>
<#@ import namespace="CodeGen" #>
<#+
    public class OAuthRequestTemplate : Template
    {
        private readonly BoxedOAuthRequest _source;
        private readonly string _namespace;

        public OAuthRequestTemplate(
            string ns, 
            BoxedOAuthRequest source)
        {
            _namespace = ns;
            _source = source;
        }

	    public override string TransformText()
        {
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Material.Metadata;
using Material.Infrastructure.ProtectedResources;
using System;
using System.Collections.Generic;
using Foundations.Enums;
using System.Net;
using Material.Infrastructure;
using System.CodeDom.Compiler;

namespace <#= _namespace #>
{     
    /// <summary>
    /// <#= _source.Comments #>
    /// </summary>
	[GeneratedCode("T4Toolbox", "14.0")]
	public partial class <#= _source.Name #> : OAuthRequest 
    {
        public override string Host { get; } = "<#= _source.Host  #>";
        public override string Path { get; } = "<#= _source.Path  #>";
        public override string HttpMethod { get; } = "<#= _source.HttpMethod  #>";
        public override List<MediaType> Produces { get; } = new List<MediaType> { <#= _source.FormattedProduces #> };
        public override List<MediaType> Consumes { get; } = new List<MediaType> { <#= _source.FormattedConsumes #> };
        public override List<string> RequiredScopes { get; } = new List<string> { <#= _source.FormattedRequiredScopes #> };
        public override List<HttpStatusCode> ExpectedStatusCodes { get; } = new List<HttpStatusCode> { <#= _source.FormattedExpectedStatusCodes #> };
<#+
            foreach (var property in _source.Properties)
            {
#>
        /// <summary>
        /// <#= property.Comments #>
        /// </summary>
<#+
                foreach(var metadata in property.Metadatas)
                {
                    if (metadata.Arguments != null)
                    {
#>
        [<#= metadata.Type #>(<#= metadata.Arguments #>)]
<#+
                    }
                    else
                    {
#>
        [<#= metadata.Type #>]
<#+
                    }
                }

                if (property.Value != null)
                {
#>
        public <#= property.Type #> <#= property.Name #> { get; } = <#= property.Value #>;
<#+
                }
                else
                {
#>
        public <#= property.Type #> <#= property.Name #> { get; }
<#+
                }
            }
#>
    }
<#+
            foreach (var enumeration in _source.Enums)
            {
#>
    public enum <#= enumeration.Name #>
    {
<#+
                foreach (var item in _source.Items)
                {
#>
        [Description("<#= item.Value #>")] <#= item.Key #>,
<#+
                }
#>
    }
<#+
            }
#>
}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }
#>