<#@ include file="T4Toolbox.tt" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@  assembly name="$(TargetDir)CodeGen.dll" #>
<#@  assembly name="$(TargetDir)Material.Portable.dll" #>
<#@  assembly name="System.Core" #>
<#@  assembly name="System.Runtime" #>
<#@ import namespace="CodeGen" #>
<#+
    public class OpenIdResourceProviderTemplate : Template
    {
        private readonly BoxedOpenIdResourceProvider _source;
        private readonly string _namespace;

        public OpenIdResourceProviderTemplate(
            string ns, 
            BoxedOpenIdResourceProvider source)
        {
            _namespace = ns;
            _source = source;
        }

	    public override string TransformText()
        {
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Material.Domain.Credentials;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using Material.Framework.Enums;
using Material.Framework.Metadata;
using Material.Domain.Core;

namespace <#= _namespace #>
{     
<#+
#>
    /// <summary>
    /// <#= _source.Comments #>
    /// </summary>
    [CredentialType(typeof(OAuth2Credentials))]
	[GeneratedCode("T4Toolbox", "14.0")]
	public partial class <#= _source.Name #>  : OpenIdResourceProvider 
    {
        public override List<string> AvailableScopes { get; } = new List<string> { <#= _source.FormattedScopes #> };
        public override List<OAuth2FlowType> AllowedFlows { get; } = new List<OAuth2FlowType> { <#= _source.FormattedFlows #> };
        public override List<GrantType> AllowedGrantTypes { get; } = new List<GrantType> { <#= _source.FormattedGrantTypes #> };
        public override List<OAuth2ResponseType> AllowedResponseTypes { get; } = new List<OAuth2ResponseType> { <#= _source.FormattedResponseTypes #> };
        public override string TokenName { get; } = "<#= _source.TokenName #>";
<#+
            if(_source.AuthorizationUrl != null)
            {
#>
        public override Uri AuthorizationUrl { get; } = new Uri("<#= _source.AuthorizationUrl.ToString() #>");
<#+
            }
            else
            {
#>
        public override Uri AuthorizationUrl { get; } = null;
<#+
            }
            if(_source.TokenUrl != null)
            {
#>
        public override Uri TokenUrl { get; } = new Uri("<#= _source.TokenUrl.ToString() #>");
<#+
            }
            else
            {
#>
        public override Uri TokenUrl { get; } = null;
<#+
            }
#>
        public override bool SupportsPkce { get; } = <#= _source.SupportsPkce.ToString().ToLower() #>;
        public override bool SupportsCustomUrlScheme { get; } = <#= _source.SupportsCustomUrlScheme.ToString().ToLower() #>;
        public override char ScopeDelimiter { get; } = '<#= _source.ScopeDelimiter.ToString() ?? " "  #>';
        public override Uri OpenIdDiscoveryUrl { get; } = new Uri("<#= _source.OpenIdDiscoveryUrl.ToString() #>");
        public override List<string> ValidIssuers { get; } = new List<string> {<#= _source.FormattedIssuers  #>};
    }
}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }
#>